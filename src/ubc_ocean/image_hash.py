from enum import Enum
from functools import partial
from typing import Optional, Union, Dict, Callable

import PIL.Image
import imagehash
import numpy as np
import pandas as pd


class HashType(str, Enum):
    AVERAGE = "average"
    PERCEPTUAL = "perceptual"
    DIFFERENCE = "difference"
    WAVELET = "wavelet"
    COLOR = "color"
    CROP_RESIST = "crop_resistant"


_str_to_hash_func = {
    HashType.AVERAGE    : imagehash.hex_to_hash,
    HashType.PERCEPTUAL : imagehash.hex_to_hash,
    HashType.DIFFERENCE : imagehash.hex_to_hash,
    HashType.WAVELET    : imagehash.hex_to_hash,
    HashType.COLOR      : partial(imagehash.hex_to_flathash, hashsize=3),
    HashType.CROP_RESIST: imagehash.hex_to_multihash,
}


def restore_hash_func(hash_type: HashType, binbits: Optional[int] = None) -> Callable[[str], Union[imagehash.ImageHash, imagehash.ImageMultiHash]]:
    """Returns the inverse function that could restore an ImageHash object from its string representation."""
    if hash_type == HashType.COLOR:
        if binbits is None:
            binbits = 3
        return partial(imagehash.hex_to_flathash, hashsize=binbits)
    return _str_to_hash_func[hash_type]


def generate_hashes(im: PIL.Image, hash_size: Optional[int] = None, binbits: Optional[int] = None, mean_func: Optional[Callable] = None) -> Dict[HashType, str]:
    """Given an image, return a dict of image hashes generated by various algorithms."""

    if hash_size is None:
        hash_size = 8
    if binbits is None:
        binbits = 3
    if mean_func is None:
        mean_func = np.mean  # np.median

    hash_dict = {
        HashType.AVERAGE    : imagehash.average_hash(im, hash_size=hash_size, mean=mean_func),
        HashType.PERCEPTUAL : imagehash.phash(im, hash_size=hash_size, highfreq_factor=4),
        HashType.DIFFERENCE : imagehash.dhash(im, hash_size=hash_size),
        HashType.WAVELET    : imagehash.whash(im, hash_size=hash_size, image_scale=None, mode='haar', remove_max_haar_ll=True),
        HashType.COLOR      : imagehash.colorhash(im, binbits=binbits),
        HashType.CROP_RESIST: imagehash.crop_resistant_hash(im, hash_func=None, limit_segments=None, segment_threshold=128, min_segment_size=500, segmentation_image_size=300),
    }

    for key, val in hash_dict.items():
        hash_dict[key] = str(val)
    return hash_dict


def hashdict_to_df(hashdict: Dict[int, Dict[HashType, str]], column_suffix: str = "") -> pd.DataFrame:
    df = pd.DataFrame.from_dict(hashdict, orient="index")
    df.columns = [f"{method.value}{column_suffix}" for method in df.columns]
    df.index.name = "image_id"
    return df
